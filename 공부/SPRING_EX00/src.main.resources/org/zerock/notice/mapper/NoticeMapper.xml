<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.notice.mapper.NoticeMapper">

	<!-- 공지사항 리스트 -->
	<select id="list" resultType="org.zerock.notice.vo.NoticeVO">
		select no, title, writeDate, updateDate, image, startDate, endDate
		from (
			select rownum rnum,no, title, writeDate, updateDate, image, startDate, endDate
			from (
				select
					no, title, writeDate, updateDate, image, startDate, endDate
				from
					notice
				where
					<!-- 검색을 달아야 한다. -->
					<include refid="search" />
				order by startDate desc
			)
		)
		where rnum between #{startRow} and #{endRow}
	</select>

	<!-- 공지사항 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from notice
		where
			<!-- 검색을 달아야한다. -->
			<include refid="search" />
	</select>
	
	<!-- 공지사항 리스트의 검색 처리 -->
	<sql id="search">
		<!-- 1. 검색 처리 -->
		<if test="word != null and word != ''.toString()">
			(
			<!-- prefixOverrides="or" - 맨 앞에 or는 제거한다. -->
			<trim prefixOverrides="or">
				<!-- 'test' : 문자열(String), 't' : 문자(char) -> 문자열 - toString()사용  -->
				<if test="key.indexOf('t') >= 0">
					or title like '%' || #{word} || '%'
				</if>
				<if test="key.indexOf('c') >= 0">
					or content like '%' || #{word} || '%'
				</if>
			</trim>
			)
		</if>
		<!-- 2. 공지 기간 조건 처리 -->
		<if test="word != null and word != ''.toString()">
			and
		</if>
		<!-- 2-1. 현재 공지 조건 처리 -->
		<if test="period == 'pre'">
			<![CDATA[
				(
					startDate <= sysdate
					and
					trunc(endDate) >= trunc(sysdate)
				)
			]]>
		</if>
		<!-- 2-2. 지난 공지 조건 처리 -->
		<if test="period == 'old'">
			<![CDATA[
				(
					trunc(endDate) < trunc(sysDate)
				)
			]]>
		</if>
		<!-- 2-3. 예약 공지 조건 처리 -->
		<if test="period == 'res'">
			<![CDATA[
				(
					startDate > sysDate
				)
			]]>
		</if>
		<!-- 2-4. 모든 공지 조건 처리 -->
		<if test="period == 'all'">
			(
				1 = 1
			)
		</if>
	</sql>

	<!-- 공지사항 글보기 -->
	<select id="view" resultType="org.zerock.notice.vo.NoticeVO">
		select no, title, content, startDate, endDate, writeDate, updateDate
		from notice
		where no = #{no}
	</select>

	<!-- 공지사항 글등록 -->
	<!-- 
	<insert id="write">
		insert into notice(no, title, content, writer, pw)
		values(notice_seq.nextval, #{title}, #{content}, #{writer}, #{pw})
	</insert>
	-->
	<insert id="write">
		<!-- 먼저 NoticeVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="no" resultType="Long" order="BEFORE">
			select notice_seq.nextval from dual
		</selectKey>
		insert into notice(no, title, content
		<if test="startDate != null">
			, startDate
		</if>
		<if test="endDate != null">
			, endDate
		</if>
		)
		values(#{no}, #{title}, #{content}
		<if test="startDate != null">
			, #{startDate}
		</if>
		<if test="endDate != null">
			, #{endDate}
		</if>
		)
	</insert>

	<!-- 공지사항 글수정 -->
	<update id="update">
	<![CDATA[
		update notice
		set title = #{title}, content = #{content},
		startDate = #{startDate}, endDate = #{endDate}, updateDate = sysdate
		where no = ${no}
	]]>
	</update>

	<!-- 공지사항 글수정 -->
	<delete id="delete">
	<![CDATA[
		delete from notice
		where no = ${no}
	]]>
	</delete>

</mapper>
